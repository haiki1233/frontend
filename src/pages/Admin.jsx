import { useEffect, useMemo, useState } from "react";

import { getCurrentUserId, loadList } from "../lib/store";

import axios from "axios";

function Admin() {
  const userId = useMemo(() => getCurrentUserId(), []);

  const [activeTab, setActiveTab] = useState("dashboard");

  const [users, setUsers] = useState([]);

  const [vehicles, setVehicles] = useState([]);

  const [bookings, setBookings] = useState([]);

  const [records, setRecords] = useState([]);

  const [parts, setParts] = useState([]);

  const [assignments, setAssignments] = useState([]);

  // --- 2. TH√äM STATE M·ªöI CHO TAB KH√ÅCH H√ÄNG ---
  const [customerData, setCustomerData] = useState([]);
  const [customerLoading, setCustomerLoading] = useState(true);
  const [customerError, setCustomerError] = useState(null);

  const [staffList, setStaffList] = useState([])
  const [technicianList, setTechnicianList] = useState([])
  const [staffLoading, setStaffLoading] = useState(true) // Loading ri√™ng cho tab n√†y
  const [staffError, setStaffError] = useState(null)

  useEffect(() => {
    if (!userId) return;

    setUsers(JSON.parse(localStorage.getItem("users") || "[]"));

    setVehicles(loadList("vehicles", []));

    setBookings(loadList("bookings", []));

    setRecords(loadList("records", []));

    setParts(loadList("parts", []));

    setAssignments(loadList("assignments", []));
  }, [userId]);

  // --- 3. TH√äM USEEFFECT M·ªöI ƒê·ªÇ G·ªåI API KH√ÅCH H√ÄNG ---
  useEffect(() => {
    // H√†m n√†y s·∫Ω g·ªçi API khi b·∫°n b·∫•m v√†o tab 'customers'
    const fetchCustomerData = async () => {
      // Ch·ªâ g·ªçi API khi tab 'customers' ƒë∆∞·ª£c k√≠ch ho·∫°t v√† ch∆∞a c√≥ d·ªØ li·ªáu
      if (activeTab === "customers" && customerData.length === 0) {
        setCustomerLoading(true);
        try {
          // ƒê√¢y l√† API ch√∫ng ta ƒë√£ t·∫°o b√™n Spring Boot
          const response = await axios.get("/api/admin/customers");
          setCustomerData(response.data);
          setCustomerError(null);
        } catch (err) {
          setCustomerError("L·ªói t·∫£i d·ªØ li·ªáu kh√°ch h√†ng t·ª´ server.");
          console.error(err);
        } finally {
          setCustomerLoading(false);
        }
      }
    };

    fetchCustomerData();
  }, [activeTab, customerData.length]);


  useEffect(() => {
    const fetchStaffData = async () => {
      // Ch·ªâ g·ªçi khi tab 'staff' ƒë∆∞·ª£c k√≠ch ho·∫°t v√† ch∆∞a c√≥ d·ªØ li·ªáu
      if (activeTab === 'staff' && staffList.length === 0) {
        setStaffLoading(true);
        setStaffError(null);
        try {
          // G·ªçi ƒë·ªìng th·ªùi c·∫£ 2 API cho nhanh
          const [staffResponse, techResponse] = await Promise.all([
            axios.get('/api/admin/staff/staff-members'), // API nh√¢n vi√™n
            axios.get('/api/admin/staff/technicians')  // API k·ªπ thu·∫≠t vi√™n
          ]);
          
          setStaffList(staffResponse.data);
          setTechnicianList(techResponse.data);
        } catch (err) {
          setStaffError('L·ªói t·∫£i d·ªØ li·ªáu nh√¢n s·ª±.');
          console.error(err);
        } finally {
          setStaffLoading(false);
        }
      }
    };

    fetchStaffData();
  }, [activeTab, staffList.length]);

  // Dashboard Statistics

  const dashboardStats = useMemo(() => {
    const totalCustomers = users.filter(
      (u) => u.role === "customer" || !u.role
    ).length;

    const totalStaff = users.filter((u) => u.role === "staff").length;

    const totalTechnicians = users.filter(
      (u) => u.role === "technican" || u.role === "technician"
    ).length;

    const totalVehicles = vehicles.length;

    const totalBookings = bookings.length;

    const pendingBookings = bookings.filter(
      (b) => b.status === "pending"
    ).length;

    const activeBookings = bookings.filter((b) =>
      ["received", "in_maintenance"].includes(b.status)
    ).length;

    const completedBookings = bookings.filter(
      (b) => b.status === "done"
    ).length;

    // Financial stats

    const completedRecords = records.filter(
      (r) => r.status === "done" || r.status === "Ho√†n t·∫•t"
    );

    const totalRevenue = completedRecords.reduce(
      (sum, r) => sum + (Number(r.cost) || 0),
      0
    );

    const pendingPayments = bookings
      .filter((b) => b.status === "pending")
      .reduce((sum, b) => sum + (Number(b.estimatedPrice) || 0), 0);

    // Parts inventory

    const lowStockParts = parts.filter(
      (p) => (Number(p.currentStock) || 0) <= (Number(p.minStock) || 0)
    );

    const totalPartsValue = parts.reduce(
      (sum, p) => sum + (Number(p.currentStock) || 0) * (Number(p.price) || 0),
      0
    );

    return {
      totalCustomers,

      totalStaff,

      totalTechnicians,

      totalVehicles,

      totalBookings,

      pendingBookings,

      activeBookings,

      completedBookings,

      totalRevenue,

      pendingPayments,

      lowStockParts: lowStockParts.length,

      totalPartsValue,
    };
  }, [users, vehicles, bookings, records, parts]);

  // Recent activities

  const recentActivities = useMemo(() => {
    const activities = [];

    // Recent bookings

    bookings.slice(-5).forEach((booking) => {
      const vehicle = vehicles.find((v) => v.id === booking.vehicleId);

      activities.push({
        id: `booking-${booking.id}`,

        type: "booking",

        title: `ƒê·∫∑t l·ªãch m·ªõi: ${vehicle?.model || "N/A"}`,

        description: `${booking.serviceType} - ${booking.date} ${booking.time}`,

        status: booking.status,

        timestamp: new Date(booking.createdAt || Date.now()),
      });
    });

    // Recent completed services

    records
      .filter((r) => r.status === "done" || r.status === "Ho√†n t·∫•t")
      .slice(-3)
      .forEach((record) => {
        activities.push({
          id: `record-${record.id}`,

          type: "completion",

          title: `Ho√†n th√†nh d·ªãch v·ª•: ${record.vehicleModel || record.vehicle}`,

          description: `${record.serviceType || record.service} - ${Number(
            record.cost || 0
          ).toLocaleString()} VNƒê`,

          status: "completed",

          timestamp: new Date(record.date),
        });
      });

    return activities.sort((a, b) => b.timestamp - a.timestamp).slice(0, 8);
  }, [bookings, vehicles, records]);

  const tabs = [
    { id: "dashboard", label: "T·ªïng quan", icon: "üìä" },

    { id: "customers", label: "Kh√°ch h√†ng & Xe", icon: "üë•" },

    { id: "staff", label: "Nh√¢n s·ª±", icon: "üë®‚Äçüíº" },

    { id: "bookings", label: "L·ªãch h·∫πn & D·ªãch v·ª•", icon: "üìÖ" },

    { id: "parts", label: "Ph·ª• t√πng", icon: "üîß" },

    { id: "finance", label: "T√†i ch√≠nh", icon: "üí∞" },

    { id: "reports", label: "B√°o c√°o", icon: "üìà" },
  ];

  const renderDashboard = () => (
    <div className="space-y-6">
      {/* Key Metrics */}

      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
        <div className="bg-white rounded-lg shadow-md p-6">
          <div className="flex items-center">
            <div className="flex-shrink-0">
              <div className="w-8 h-8 bg-blue-100 rounded-full flex items-center justify-center">
                <span className="text-blue-600 font-semibold">üë•</span>
              </div>
            </div>

            <div className="ml-4">
              <p className="text-sm font-medium text-gray-500">
                T·ªïng kh√°ch h√†ng
              </p>

              <p className="text-2xl font-semibold text-gray-900">
                {dashboardStats.totalCustomers}
              </p>
            </div>
          </div>
        </div>

        <div className="bg-white rounded-lg shadow-md p-6">
          <div className="flex items-center">
            <div className="flex-shrink-0">
              <div className="w-8 h-8 bg-green-100 rounded-full flex items-center justify-center">
                <span className="text-green-600 font-semibold">üöó</span>
              </div>
            </div>

            <div className="ml-4">
              <p className="text-sm font-medium text-gray-500">T·ªïng xe</p>

              <p className="text-2xl font-semibold text-gray-900">
                {dashboardStats.totalVehicles}
              </p>
            </div>
          </div>
        </div>

        <div className="bg-white rounded-lg shadow-md p-6">
          <div className="flex items-center">
            <div className="flex-shrink-0">
              <div className="w-8 h-8 bg-yellow-100 rounded-full flex items-center justify-center">
                <span className="text-yellow-600 font-semibold">üìÖ</span>
              </div>
            </div>

            <div className="ml-4">
              <p className="text-sm font-medium text-gray-500">L·ªãch ƒë·∫∑t</p>

              <p className="text-2xl font-semibold text-gray-900">
                {dashboardStats.totalBookings}
              </p>
            </div>
          </div>
        </div>

        <div className="bg-white rounded-lg shadow-md p-6">
          <div className="flex items-center">
            <div className="flex-shrink-0">
              <div className="w-8 h-8 bg-purple-100 rounded-full flex items-center justify-center">
                <span className="text-purple-600 font-semibold">üí∞</span>
              </div>
            </div>

            <div className="ml-4">
              <p className="text-sm font-medium text-gray-500">Doanh thu</p>

              <p className="text-2xl font-semibold text-gray-900">
                {dashboardStats.totalRevenue.toLocaleString()} VNƒê
              </p>
            </div>
          </div>
        </div>
      </div>

      {/* Status Overview */}

      <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
        <div className="bg-white rounded-lg shadow-md p-6">
          <h3 className="text-lg font-semibold text-gray-900 mb-4">
            Tr·∫°ng th√°i d·ªãch v·ª•
          </h3>

          <div className="space-y-4">
            <div className="flex justify-between items-center">
              <span className="text-sm text-gray-600">Ch·ªù ti·∫øp nh·∫≠n</span>

              <span className="px-2 py-1 bg-gray-100 text-gray-800 rounded-full text-sm font-medium">
                {dashboardStats.pendingBookings}
              </span>
            </div>

            <div className="flex justify-between items-center">
              <span className="text-sm text-gray-600">ƒêang b·∫£o d∆∞·ª°ng</span>

              <span className="px-2 py-1 bg-yellow-100 text-yellow-800 rounded-full text-sm font-medium">
                {dashboardStats.activeBookings}
              </span>
            </div>

            <div className="flex justify-between items-center">
              <span className="text-sm text-gray-600">Ho√†n t·∫•t</span>

              <span className="px-2 py-1 bg-green-100 text-green-800 rounded-full text-sm font-medium">
                {dashboardStats.completedBookings}
              </span>
            </div>
          </div>
        </div>

        <div className="bg-white rounded-lg shadow-md p-6">
          <h3 className="text-lg font-semibold text-gray-900 mb-4">Nh√¢n s·ª±</h3>

          <div className="space-y-4">
            <div className="flex justify-between items-center">
              <span className="text-sm text-gray-600">Nh√¢n vi√™n</span>

              <span className="px-2 py-1 bg-blue-100 text-blue-800 rounded-full text-sm font-medium">
                {dashboardStats.totalStaff}
              </span>
            </div>

            <div className="flex justify-between items-center">
              <span className="text-sm text-gray-600">K·ªπ thu·∫≠t vi√™n</span>

              <span className="px-2 py-1 bg-green-100 text-green-800 rounded-full text-sm font-medium">
                {dashboardStats.totalTechnicians}
              </span>
            </div>

            <div className="flex justify-between items-center">
              <span className="text-sm text-gray-600">T·ªïng nh√¢n s·ª±</span>

              <span className="px-2 py-1 bg-purple-100 text-purple-800 rounded-full text-sm font-medium">
                {dashboardStats.totalStaff + dashboardStats.totalTechnicians}
              </span>
            </div>
          </div>
        </div>
      </div>

      {/* Recent Activities */}

      <div className="bg-white rounded-lg shadow-md p-6">
        <h3 className="text-lg font-semibold text-gray-900 mb-4">
          Ho·∫°t ƒë·ªông g·∫ßn ƒë√¢y
        </h3>

        <div className="space-y-3">
          {recentActivities.length === 0 ? (
            <p className="text-gray-500 text-center py-4">
              Ch∆∞a c√≥ ho·∫°t ƒë·ªông n√†o
            </p>
          ) : (
            recentActivities.map((activity) => (
              <div
                key={activity.id}
                className="flex items-center space-x-3 p-3 bg-gray-50 rounded-lg"
              >
                <div className="flex-shrink-0">
                  <div
                    className={`w-8 h-8 rounded-full flex items-center justify-center ${
                      activity.type === "booking"
                        ? "bg-blue-100"
                        : "bg-green-100"
                    }`}
                  >
                    <span
                      className={`text-sm ${
                        activity.type === "booking"
                          ? "text-blue-600"
                          : "text-green-600"
                      }`}
                    >
                      {activity.type === "booking" ? "üìÖ" : "‚úÖ"}
                    </span>
                  </div>
                </div>

                <div className="flex-1 min-w-0">
                  <p className="text-sm font-medium text-gray-900">
                    {activity.title}
                  </p>

                  <p className="text-sm text-gray-500">
                    {activity.description}
                  </p>
                </div>

                <div className="flex-shrink-0">
                  <span
                    className={`px-2 py-1 text-xs font-semibold rounded-full ${
                      activity.status === "pending"
                        ? "bg-gray-100 text-gray-800"
                        : activity.status === "received"
                        ? "bg-blue-100 text-blue-800"
                        : activity.status === "in_maintenance"
                        ? "bg-yellow-100 text-yellow-800"
                        : "bg-green-100 text-green-800"
                    }`}
                  >
                    {activity.status === "pending"
                      ? "Ch·ªù"
                      : activity.status === "received"
                      ? "Ti·∫øp nh·∫≠n"
                      : activity.status === "in_maintenance"
                      ? "ƒêang l√†m"
                      : "Ho√†n t·∫•t"}
                  </span>
                </div>
              </div>
            ))
          )}
        </div>
      </div>
    </div>
  );

  const renderCustomers = () => {
    // H√†m format ti·ªÅn
    const formatCurrency = (amount) => {
      if (amount == null) return "0 VNƒê";
      return amount.toLocaleString("vi-VN", {
        style: "currency",
        currency: "VND",
      });
    };

    // X·ª≠ l√Ω tr·∫°ng th√°i loading v√† error
    if (customerLoading) {
      return (
        <div className="p-6 text-center">ƒêang t·∫£i d·ªØ li·ªáu kh√°ch h√†ng...</div>
      );
    }

    if (customerError) {
      return (
        <div className="p-6 text-center text-red-600">{customerError}</div>
      );
    }

    return (
      <div className="space-y-6">
        <div className="bg-white rounded-lg shadow-md p-6">
          <h3 className="text-lg font-semibold text-gray-900 mb-4">
            Qu·∫£n l√Ω kh√°ch h√†ng & xe
          </h3>
          <div className="overflow-x-auto">
            <table className="min-w-full divide-y divide-gray-200">
              <thead className="bg-gray-50">
                <tr>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">
                    Kh√°ch h√†ng
                  </th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">
                    S·ªë xe
                  </th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">
                    D·ªãch v·ª•
                  </th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">
                    Chi ph√≠
                  </th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">
                    H√†nh ƒë·ªông
                  </th>
                </tr>
              </thead>
              <tbody className="bg-white divide-y divide-gray-200">
                {customerData.map((customer) => (
                  <tr key={customer.customerId} className="hover:bg-gray-50">
                    <td className="px-6 py-4 whitespace-nowrap">
                      <div>
                        <div className="text-sm font-medium text-gray-900">
                          {customer.customerName}
                        </div>
                        <div className="text-sm text-gray-500">
                          {customer.customerEmail}
                        </div>
                      </div>
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                      {customer.vehicleCount}
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                      {customer.serviceCount}
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                      {formatCurrency(customer.totalCost)}
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap text-sm">
                      <button className="text-blue-600 hover:text-blue-900 mr-3">
                        Xem
                      </button>
                      <button className="text-green-600 hover:text-green-900">
                        Chat
                      </button>
                    </td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
        </div>
      </div>
    );
  };

// --- VI·∫æT L·∫†I HO√ÄN TO√ÄN `renderStaff` ---
  const renderStaff = () => {
    // 1. X·ª≠ l√Ω loading
    if (staffLoading) {
      return <div className="p-6 text-center">ƒêang t·∫£i d·ªØ li·ªáu nh√¢n s·ª±...</div>;
    }

    // 2. X·ª≠ l√Ω l·ªói
    if (staffError) {
      return <div className="p-6 text-center text-red-600">{staffError}</div>;
    }

    // 3. Hi·ªÉn th·ªã d·ªØ li·ªáu
    return (
      <div className="space-y-6">
        <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
          
          {/* C·ªòT 1: NH√ÇN VI√äN */}
          <div className="bg-white rounded-lg shadow-md p-6">
            <h3 className="text-lg font-semibold text-gray-900 mb-4">Nh√¢n vi√™n</h3>
            <div className="space-y-3">
              {staffList.length === 0 ? (
                <p className="text-gray-500 text-center">Kh√¥ng c√≥ nh√¢n vi√™n n√†o.</p>
              ) : (
                staffList.map((staff) => (
                  <div key={staff.id} className="flex items-center justify-between p-3 bg-gray-50 rounded-lg">
                    <div>
                      <p className="font-medium text-gray-900">{staff.fullName}</p>
                      <p className="text-sm text-gray-600">{staff.email}</p>
                    </div>
                    <div className="flex gap-2 flex-shrink-0">
                      <button className="text-blue-600 hover:text-blue-900 text-sm">Ch·ªânh s·ª≠a</button>
                      <button className="text-red-600 hover:text-red-900 text-sm">X√≥a</button>
                    </div>
                  </div>
                ))
              )}
            </div>
          </div>

          {/* C·ªòT 2: K·ª∏ THU·∫¨T VI√äN */}
          <div className="bg-white rounded-lg shadow-md p-6">
            <h3 className="text-lg font-semibold text-gray-900 mb-4">K·ªπ thu·∫≠t vi√™n</h3>
            <div className="space-y-3">
              {technicianList.length === 0 ? (
                <p className="text-gray-500 text-center">Kh√¥ng c√≥ k·ªπ thu·∫≠t vi√™n n√†o.</p>
              ) : (
                technicianList.map((tech) => (
                  <div key={tech.id} className="flex items-center justify-between p-3 bg-gray-50 rounded-lg">
                    <div>
                      <p className="font-medium text-gray-900">{tech.fullName}</p>
                      <p className="text-sm text-gray-600">{tech.email}</p>
                    </div>
                    <div className="flex gap-2 flex-shrink-0">
                      <button className="text-blue-600 hover:text-blue-900 text-sm">Ch·ªânh s·ª≠a</button>
                      <button className="text-red-600 hover:text-red-900 text-sm">X√≥a</button>
                    </div>
                  </div>
                ))
              )}
            </div>
          </div>

        </div>
      </div>
    );
  };

  const renderBookings = () => (
    <div className="space-y-6">
      <div className="bg-white rounded-lg shadow-md p-6">
        <h3 className="text-lg font-semibold text-gray-900 mb-4">
          Qu·∫£n l√Ω l·ªãch h·∫πn & d·ªãch v·ª•
        </h3>

        <div className="overflow-x-auto">
          <table className="min-w-full divide-y divide-gray-200">
            <thead className="bg-gray-50">
              <tr>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">
                  Kh√°ch h√†ng
                </th>

                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">
                  Xe
                </th>

                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">
                  D·ªãch v·ª•
                </th>

                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">
                  Th·ªùi gian
                </th>

                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">
                  Tr·∫°ng th√°i
                </th>

                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">
                  H√†nh ƒë·ªông
                </th>
              </tr>
            </thead>

            <tbody className="bg-white divide-y divide-gray-200">
              {bookings.map((booking) => {
                const vehicle = vehicles.find(
                  (v) => v.id === booking.vehicleId
                );

                const user = users.find((u) => vehicle?.userId === u.id);

                return (
                  <tr key={booking.id} className="hover:bg-gray-50">
                    <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                      {user?.fullName || "N/A"}
                    </td>

                    <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                      {vehicle?.model || "N/A"}
                    </td>

                    <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                      {booking.serviceType}
                    </td>

                    <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                      {booking.date} {booking.time}
                    </td>

                    <td className="px-6 py-4 whitespace-nowrap text-sm">
                      <span
                        className={`px-2 inline-flex text-xs leading-5 font-semibold rounded-full ${
                          booking.status === "pending"
                            ? "bg-gray-100 text-gray-800"
                            : booking.status === "received"
                            ? "bg-blue-100 text-blue-800"
                            : booking.status === "in_maintenance"
                            ? "bg-yellow-100 text-yellow-800"
                            : "bg-green-100 text-green-800"
                        }`}
                      >
                        {booking.status === "pending"
                          ? "Ch·ªù ti·∫øp nh·∫≠n"
                          : booking.status === "received"
                          ? "ƒê√£ ti·∫øp nh·∫≠n"
                          : booking.status === "in_maintenance"
                          ? "ƒêang b·∫£o d∆∞·ª°ng"
                          : "Ho√†n t·∫•t"}
                      </span>
                    </td>

                    <td className="px-6 py-4 whitespace-nowrap text-sm">
                      <button className="text-blue-600 hover:text-blue-900 mr-3">
                        Xem
                      </button>

                      <button className="text-green-600 hover:text-green-900">
                        S·ª≠a
                      </button>
                    </td>
                  </tr>
                );
              })}
            </tbody>
          </table>
        </div>
      </div>
    </div>
  );

  const renderParts = () => (
    <div className="space-y-6">
      <div className="bg-white rounded-lg shadow-md p-6">
        <h3 className="text-lg font-semibold text-gray-900 mb-4">
          Qu·∫£n l√Ω ph·ª• t√πng
        </h3>

        <div className="mb-4 flex justify-between items-center">
          <div className="text-sm text-gray-600">
            Ph·ª• t√πng s·∫Øp h·∫øt:{" "}
            <span className="font-semibold text-red-600">
              {dashboardStats.lowStockParts}
            </span>
          </div>

          <div className="text-sm text-gray-600">
            T·ªïng gi√° tr·ªã:{" "}
            <span className="font-semibold text-green-600">
              {dashboardStats.totalPartsValue.toLocaleString()} VNƒê
            </span>
          </div>
        </div>

        <div className="overflow-x-auto">
          <table className="min-w-full divide-y divide-gray-200">
            <thead className="bg-gray-50">
              <tr>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">
                  T√™n ph·ª• t√πng
                </th>

                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">
                  T·ªìn kho
                </th>

                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">
                  T·ªëi thi·ªÉu
                </th>

                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">
                  Gi√°
                </th>

                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">
                  Tr·∫°ng th√°i
                </th>

                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">
                  H√†nh ƒë·ªông
                </th>
              </tr>
            </thead>

            <tbody className="bg-white divide-y divide-gray-200">
              {parts.map((part) => {
                const isLowStock =
                  (Number(part.currentStock) || 0) <=
                  (Number(part.minStock) || 0);

                return (
                  <tr key={part.id} className="hover:bg-gray-50">
                    <td className="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">
                      {part.name}
                    </td>

                    <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                      {part.currentStock}
                    </td>

                    <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                      {part.minStock}
                    </td>

                    <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                      {Number(part.price || 0).toLocaleString()} VNƒê
                    </td>

                    <td className="px-6 py-4 whitespace-nowrap text-sm">
                      <span
                        className={`px-2 inline-flex text-xs leading-5 font-semibold rounded-full ${
                          isLowStock
                            ? "bg-red-100 text-red-800"
                            : "bg-green-100 text-green-800"
                        }`}
                      >
                        {isLowStock ? "S·∫Øp h·∫øt" : "ƒê·ªß h√†ng"}
                      </span>
                    </td>

                    <td className="px-6 py-4 whitespace-nowrap text-sm">
                      <button className="text-blue-600 hover:text-blue-900 mr-3">
                        S·ª≠a
                      </button>

                      <button className="text-green-600 hover:text-green-900">
                        Nh·∫≠p kho
                      </button>
                    </td>
                  </tr>
                );
              })}
            </tbody>
          </table>
        </div>
      </div>
    </div>
  );

  const renderFinance = () => (
    <div className="space-y-6">
      <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
        <div className="bg-white rounded-lg shadow-md p-6">
          <h3 className="text-lg font-semibold text-gray-900 mb-4">
            T√†i ch√≠nh t·ªïng quan
          </h3>

          <div className="space-y-4">
            <div className="flex justify-between items-center">
              <span className="text-sm text-gray-600">Doanh thu ƒë√£ thu</span>

              <span className="text-lg font-semibold text-green-600">
                {dashboardStats.totalRevenue.toLocaleString()} VNƒê
              </span>
            </div>

            <div className="flex justify-between items-center">
              <span className="text-sm text-gray-600">Ch·ªù thanh to√°n</span>

              <span className="text-lg font-semibold text-orange-600">
                {dashboardStats.pendingPayments.toLocaleString()} VNƒê
              </span>
            </div>

            <div className="flex justify-between items-center">
              <span className="text-sm text-gray-600">
                T·ªïng gi√° tr·ªã ph·ª• t√πng
              </span>

              <span className="text-lg font-semibold text-blue-600">
                {dashboardStats.totalPartsValue.toLocaleString()} VNƒê
              </span>
            </div>
          </div>
        </div>

        <div className="bg-white rounded-lg shadow-md p-6">
          <h3 className="text-lg font-semibold text-gray-900 mb-4">
            Th·ªëng k√™ d·ªãch v·ª•
          </h3>

          <div className="space-y-4">
            <div className="flex justify-between items-center">
              <span className="text-sm text-gray-600">T·ªïng d·ªãch v·ª•</span>

              <span className="text-lg font-semibold text-gray-900">
                {dashboardStats.totalBookings}
              </span>
            </div>

            <div className="flex justify-between items-center">
              <span className="text-sm text-gray-600">Ho√†n t·∫•t</span>

              <span className="text-lg font-semibold text-green-600">
                {dashboardStats.completedBookings}
              </span>
            </div>

            <div className="flex justify-between items-center">
              <span className="text-sm text-gray-600">ƒêang x·ª≠ l√Ω</span>

              <span className="text-lg font-semibold text-yellow-600">
                {dashboardStats.activeBookings}
              </span>
            </div>
          </div>
        </div>
      </div>
    </div>
  );

  const renderReports = () => (
    <div className="space-y-6">
      <div className="bg-white rounded-lg shadow-md p-6">
        <h3 className="text-lg font-semibold text-gray-900 mb-4">
          B√°o c√°o & Th·ªëng k√™
        </h3>

        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
          <button className="p-4 border border-gray-200 rounded-lg hover:bg-gray-50 text-left">
            <h4 className="font-medium text-gray-900">B√°o c√°o doanh thu</h4>

            <p className="text-sm text-gray-600 mt-1">
              Xu·∫•t b√°o c√°o doanh thu theo th√°ng/qu√Ω
            </p>
          </button>

          <button className="p-4 border border-gray-200 rounded-lg hover:bg-gray-50 text-left">
            <h4 className="font-medium text-gray-900">Th·ªëng k√™ d·ªãch v·ª•</h4>

            <p className="text-sm text-gray-600 mt-1">
              Ph√¢n t√≠ch lo·∫°i d·ªãch v·ª• ph·ªï bi·∫øn
            </p>
          </button>

          <button className="p-4 border border-gray-200 rounded-lg hover:bg-gray-50 text-left">
            <h4 className="font-medium text-gray-900">B√°o c√°o ph·ª• t√πng</h4>

            <p className="text-sm text-gray-600 mt-1">
              Th·ªëng k√™ ti√™u hao v√† ƒë·ªÅ xu·∫•t nh·∫≠p kho
            </p>
          </button>

          <button className="p-4 border border-gray-200 rounded-lg hover:bg-gray-50 text-left">
            <h4 className="font-medium text-gray-900">Hi·ªáu su·∫•t nh√¢n s·ª±</h4>

            <p className="text-sm text-gray-600 mt-1">
              ƒê√°nh gi√° hi·ªáu su·∫•t l√†m vi·ªác
            </p>
          </button>

          <button className="p-4 border border-gray-200 rounded-lg hover:bg-gray-50 text-left">
            <h4 className="font-medium text-gray-900">Kh√°ch h√†ng VIP</h4>

            <p className="text-sm text-gray-600 mt-1">
              Danh s√°ch kh√°ch h√†ng c√≥ gi√° tr·ªã cao
            </p>
          </button>

          <button className="p-4 border border-gray-200 rounded-lg hover:bg-gray-50 text-left">
            <h4 className="font-medium text-gray-900">Xu h∆∞·ªõng h·ªèng h√≥c</h4>

            <p className="text-sm text-gray-600 mt-1">
              Ph√¢n t√≠ch c√°c l·ªói th∆∞·ªùng g·∫∑p
            </p>
          </button>
        </div>
      </div>
    </div>
  );

  const renderTabContent = () => {
    switch (activeTab) {
      case "dashboard":
        return renderDashboard();

      case "customers":
        return renderCustomers();

      case "staff":
        return renderStaff();

      case "bookings":
        return renderBookings();

      case "parts":
        return renderParts();

      case "finance":
        return renderFinance();

      case "reports":
        return renderReports();

      default:
        return renderDashboard();
    }
  };

  return (
    <div className="min-h-screen bg-gray-50">
      <main className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        <div className="mb-8">
          <h1 className="text-3xl font-bold text-gray-900">
            Qu·∫£n l√Ω h·ªá th·ªëng EV Service Center
          </h1>
        </div>

        {/* Tabs */}

        <div className="bg-white rounded-lg shadow-md mb-6">
          <div className="border-b border-gray-200">
            <nav className="-mb-px flex space-x-8 px-6" aria-label="Tabs">
              {tabs.map((tab) => (
                <button
                  key={tab.id}
                  onClick={() => setActiveTab(tab.id)}
                  className={`py-4 px-1 border-b-2 font-medium text-sm ${
                    activeTab === tab.id
                      ? "border-blue-500 text-blue-600"
                      : "border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300"
                  }`}
                >
                  <span className="mr-2">{tab.icon}</span>

                  {tab.label}
                </button>
              ))}
            </nav>
          </div>
        </div>

        {/* Tab Content */}

        {renderTabContent()}
      </main>
    </div>
  );
}

export default Admin;
